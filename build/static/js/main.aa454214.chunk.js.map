{"version":3,"sources":["components/filter.js","components/personForm.js","components/persons.js","services/phoneBookAccess.js","components/notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterText","onFilterChange","value","onChange","PersonForm","name","number","setNewNameHandler","setNewNumberHandler","addNewNameHandler","onSubmit","type","handleDeletion","person","deletionHandler","window","confirm","RenderPersons","persons","filter","toUpperCase","includes","map","key","onClick","uri","attachErrorHandling","promise","responsePromise","axios","get","then","x","data","newEntry","post","entryId","updatedEntry","put","delete","Notification","message","isError","className","defaultNotificationMessage","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilterText","notificationMessage","setNotificationMessage","notifyUser","setTimeout","useEffect","phoneBookService","updateExistingEntryIfNecessary","existingEntry","updatedPerson","id","catch","error","event","target","preventDefault","existingPerson","find","undefined","newPerson","concat","console","log","response","personToDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa454214.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ filterText, onFilterChange }) => \r\n  <p>\r\n    filter shown with\r\n    <input value={filterText} onChange={onFilterChange} />\r\n  </p>;\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst PersonForm = ({\r\n    name,\r\n    number,\r\n    setNewNameHandler,\r\n    setNewNumberHandler,\r\n    addNewNameHandler,\r\n  }) => \r\n    <form onSubmit={addNewNameHandler}>\r\n      <div>\r\n        name: <input value={name} onChange={setNewNameHandler} />\r\n      </div>\r\n      <div>\r\n        number: <input value={number} onChange={setNewNumberHandler} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>;\r\n  \r\nexport default PersonForm;","import React from \"react\";\r\n\r\nconst handleDeletion = (person, deletionHandler) => () => {\r\n  if (window.confirm(`Delete ${person.name}?`)) {\r\n    deletionHandler(person);\r\n  }\r\n};\r\n\r\nconst RenderPersons = ({ persons, filterText, deletionHandler }) => (\r\n  <ul>\r\n    {persons\r\n      .filter((person) => {\r\n        return person.name.toUpperCase().includes(filterText.toUpperCase());\r\n      })\r\n      .map((person) => (\r\n        <li key={person.name}>\r\n          {person.name}: {person.number}\r\n          <button type=\"button\" onClick={handleDeletion(person, deletionHandler)}>\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n  </ul>\r\n);\r\n\r\nexport default RenderPersons;\r\n","import axios from \"axios\";\r\n\r\nconst uri = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  var responsePromise = axios.get(uri).then((x) => x.data);\r\n  return attachErrorHandling(responsePromise);\r\n};\r\n\r\nconst addPhoneEntry = (newEntry) => {\r\n  var responsePromise = axios.post(uri, newEntry).then((x) => x.data);\r\n  return attachErrorHandling(responsePromise);\r\n};\r\n\r\nconst updatePhoneEntry = (entryId, updatedEntry) => {\r\n  var responsePromise = axios.put(`${uri}/${entryId}`, updatedEntry).then((x) => x.data);\r\n  return attachErrorHandling(responsePromise);\r\n};\r\n\r\nconst removePhoneEntry = (entryId) => {\r\n  var responsePromise = axios.delete(`${uri}/${entryId}`).then((x) => x.data);\r\n  return attachErrorHandling(responsePromise);\r\n};\r\n\r\nconst attachErrorHandling = (promise) => promise;\r\n\r\n// promise.catch((error) =>\r\n//     alert(`error occurred during data fetching: ${error}`)\r\n//   );\r\n\r\nexport default { getAll, addPhoneEntry, updatePhoneEntry, removePhoneEntry };\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, isError }) => {\r\n  if (message === null) return null;\r\n\r\n  if (isError) {\r\n    return (\r\n      <div className=\"notificationBar\">\r\n        <div className=\"errorNotification\">{message}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"notificationBar\">\r\n      <div className=\"infoNotification\">{message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/filter\";\r\nimport PersonForm from \"./components/personForm\";\r\nimport RenderPersons from \"./components/persons\";\r\nimport phoneBookService from \"./services/phoneBookAccess\";\r\nimport Notification from \"./components/notification\";\r\n\r\nconst defaultNotificationMessage = { message: null, isError: false };\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const [notificationMessage, setNotificationMessage] = useState(defaultNotificationMessage);\r\n\r\n  const notifyUser = (message, isError) => {\r\n    setNotificationMessage({ message, isError });\r\n    setTimeout(() => {\r\n      setNotificationMessage(defaultNotificationMessage);\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    phoneBookService.getAll().then((x) => setPersons(x));\r\n  }, []);\r\n\r\n  const addNewName = (event) => {\r\n    event.preventDefault();\r\n\r\n    const existingPerson = persons.find((x) => x.name === newName);\r\n    if (existingPerson !== undefined) {\r\n      updateExistingEntryIfNecessary(existingPerson);\r\n      return;\r\n    }\r\n\r\n    const newPerson = { name: newName, number: newNumber };\r\n    phoneBookService\r\n      .addPhoneEntry(newPerson)\r\n      .then((x) => {\r\n        setPersons(persons.concat(x));\r\n        notifyUser(`Added ${newPerson.name}`, false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response)\r\n        notifyUser(error.response.data.error, true);\r\n      });\r\n  };\r\n\r\n  const removePersonHandler = (personToDelete) => {\r\n    phoneBookService.removePhoneEntry(personToDelete.id).then((x) => {\r\n      setPersons(persons.filter((x) => x.name !== personToDelete.name));\r\n      notifyUser(`Removed ${personToDelete.name}`, false);\r\n    });\r\n  };\r\n\r\n  const updateExistingEntryIfNecessary = (existingEntry) => {\r\n    const shallUpdate = window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`);\r\n\r\n    if (shallUpdate) {\r\n      const updatedPerson = { ...existingEntry, number: newNumber };\r\n      phoneBookService\r\n        .updatePhoneEntry(existingEntry.id, updatedPerson)\r\n        .then(() => {\r\n          setPersons(persons.map((x) => (x.id !== updatedPerson.id ? x : updatedPerson)));\r\n          notifyUser(`Updated ${existingEntry.name}'s phone number.`, false);\r\n        })\r\n        .catch((error) => {\r\n          notifyUser(`Error happened: ${error}`, true);\r\n        });\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Notification {...notificationMessage} />\r\n\r\n      <Filter filterText={filterText} onFilterChange={(event) => setFilterText(event.target.value)} />\r\n\r\n      <h3>Add a new</h3>\r\n      <PersonForm\r\n        name={newName}\r\n        setNewNameHandler={(event) => setNewName(event.target.value)}\r\n        number={newNumber}\r\n        setNewNumberHandler={(event) => setNewNumber(event.target.value)}\r\n        addNewNameHandler={addNewName}\r\n      />\r\n\r\n      <h3>Numbers</h3>\r\n      <RenderPersons persons={persons} filterText={filterText} deletionHandler={removePersonHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}